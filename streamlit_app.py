# -*- coding: utf-8 -*-
"""
Created on Thu Mar 20 19:12:26 2025

@author: otamm
"""

import streamlit as st
import pandas as pd
import sqlite3
from fpdf import FPDF
import os
from cryptography.fernet import Fernet # üîê f√ºr Verschl√ºsselung
import streamlit.components.v1 as components

import wetterdienst
st.write("Aktiv verwendete wetterdienst-Version:", wetterdienst.__version__)
st.write("Wetterdienst-Modulpfad:", os.path.dirname(wetterdienst.__file__))

import polars as pl

# Zugriff √ºber Secret
ADMIN_PASSWORT = st.secrets["admin_passwort"]
key = st.secrets["aes_key"].encode()
fernet = Fernet(key)

# ----------------------------------------
# üîß Hilfsfunktionen
# ----------------------------------------

def encrypt_database():
    key = st.secrets["aes_key"].encode()
    fernet = Fernet(key)

    with open("datenbank/betriebsdaten.db", "rb") as file:
        original = file.read()

    encrypted = fernet.encrypt(original)

    with open("datenbank/betriebsdaten_encrypted.db", "wb") as enc_file:
        enc_file.write(encrypted)

def format_de(value, decimals=2, tausender="'"):
    if isinstance(value, (int, float)):
        s = f"{value:,.{decimals}f}"
        s = s.replace(",", "X").replace(".", ",").replace("X", tausender)
        return s
    return str(value)

# Sicherstellen, dass der Speicherordner existiert
if not os.path.exists("datenbank"):
    os.makedirs("datenbank")

# ----------------------------------------
# üìå Zentrale Tooltips f√ºr alle Eingabefelder
# ----------------------------------------

tooltips = {
    "standort": "Name oder Bezeichnung des Anlagenstandorts",
    "betreiber": "Firma oder Organisation, die die Anlage betreibt",
    "kontaktperson": "Technische oder kaufm√§nnische Ansprechperson",
    "email": "E-Mail der Kontaktperson",
    "telefon": "Telefonnummer f√ºr R√ºckfragen",
    "plz": "Postleitzahl des Standorts",
    "ort": "Ort des Standorts",
    "strasse": "Stra√üe und Hausnummer des Standorts",
    "stromverbrauch": "J√§hrlicher Stromverbrauch der K√§ltemaschine in kWh inkl. aller Pumpen, Ventilatoren etc. sofern bekannt",
    "strompreis": "Strompreis pro kWh laut Stromrechnung",
    "betriebsstunden": "Anzahl der Betriebsstunden der K√§ltemaschine pro Jahr",
    "max_k√§lteleistung": "Maximale K√§lteleistung laut Herstellerdatenblatt in kW",
    "durchschn_k√§lteleistung": "Durchschnittlich abgenommene K√§lteleistung in kW",
    "wirkungsgrad": "Energie-Effizienz-Verh√§ltnis (EER) der Anlage, √ºblicher Weise liegt dieser zwischen 2 und 5",
    "messverbrauch": "Geben Sie hier den gemessenen Stromverbrauch Ihrer Anlage in kWh an.",
    "messdauer": "Geben Sie hier die Dauer Ihrer Messung in Stunden an.",
    "volumenstrom": "Wasser-Volumenstrom in m¬≥/h",
    "temp_eintritt": "Eintrittstemperatur des K√ºhlwassers in die K√§ltemaschine [¬∞C]",
    "temp_austritt": "Austrittstemperatur des K√ºhlwassers aus der K√§ltemaschine [¬∞C]"
}


db_path = "datenbank/betriebsdaten.db"
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Tabelle erstellen
cursor.execute('''
    CREATE TABLE IF NOT EXISTS betriebsdaten (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        standort TEXT,
        betreiber TEXT,
        kontaktperson TEXT,
        email TEXT,
        telefon TEXT,
        plz TEXT,
        ort TEXT,
        strasse TEXT,
        stromverbrauch REAL,
        betriebsstunden INTEGER,
        strompreis REAL,
        max_k√§lteleistung REAL,
        durchschn_k√§lteleistung REAL,
        wirkungsgrad REAL,
        volumenstrom REAL,
        temp_eintritt REAL,
        temp_austritt REAL,
        kosten REAL
    )
''')
conn.commit()

def generate_pdf(data):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, "Betriebsdaten-Bericht", ln=True, align="C")
    pdf.ln(10)
    for key, value in data.items():
        pdf.cell(200, 10, f"{key}: {value}", ln=True)
    pdf_path = "Betriebsbericht.pdf"
    pdf.output(pdf_path)
    return pdf_path

# Autocomplete f√ºr alle Formularfelder aktivieren
components.html("""
<script>
  // aktiviert autocomplete auf allen Input-Feldern
  document.querySelectorAll("input").forEach(el => el.setAttribute("autocomplete", "on"));
</script>
""", height=0)

st.title("Adsorbus CoolCalc")
st.markdown(
    """
    <style>
    .custom-info-box {
        padding: 1em;
        background-color: #172D43; /* Exakte Info-Box-Farbe */
        color: #C7EBFF; /* Wei√üe Schrift f√ºr besseren Kontrast */
        border-radius: 5px;
        font-weight: normal;
        text-align: justify;  /* üîÑ Blocksatz aktiviert */
    }
    </style>
    <div class="custom-info-box">
        Adsorbus CoolCalc f√ºhrt eine Potenzialanalyse zu Ihrer K√§lteanwendung durch. <br>
        Im nachfolgenden Formular erfassen wir alle wesentlichen Parameter Ihrer Bestandsanlage und Ihrer verf√ºgbaren Abw√§rme.
        Anhand dieser Parameter berechnen und vergleichen wir Varianten mit unseren Adsorbtionsk√§ltemaschinen in Bezug auf 
        Ihren energetischen Einsparungen und Ihrer Wirtschaftlichkeit.<br>
        Das Ergebnis k√∂nnen Sie im Anschluss sofort als PDF-Report herunterladen. F√ºr weitere Fragen zur Umsetzuzung, zur Installation und f√ºr ein Detailliertes Angebot,
        nehmen Sie gerne Kontakt mit uns auf. Wir beraten Sie gerne.<br>
        Wenn Sie m√∂chten, k√∂nnen wir das Formular auch automaschisch mit Werten f√ºllen.
    </div>
    """,
    unsafe_allow_html=True
)

# üìå Auswahl: Formular mit Beispieldaten f√ºllen?
mit_beispieldaten = st.checkbox("Formular mit Beispielwerten vorausf√ºllen? üìù", value=False)

# Web-App UI
st.header("Betriebsdatenerfassung f√ºr die K√§ltemaschine")

# Robuste Zuweisung mit Fallback-Werten
(
    id_val, standort_val, betreiber_val, kontaktperson_val, email_val, telefon_val,
    plz_val, ort_val, strasse_val,
    stromverbrauch_val, betriebsstunden_val, strompreis_val,
    max_k√§lteleistung_val, durchschn_k√§lteleistung_val, wirkungsgrad_val,
    volumenstrom_val, temp_eintritt_val, temp_austritt_val, kosten_val
) = (None,) * 19

# üì• Autoausf√ºllung bei Bedarf
standort_val = "Werk Nord" if mit_beispieldaten else standort_val or ""
betreiber_val = "Muster GmbH" if mit_beispieldaten else betreiber_val or ""
kontaktperson_val = "Martina Mustermann" if mit_beispieldaten else kontaktperson_val or ""
email_val = "technik@mustergmbh.de" if mit_beispieldaten else email_val or ""
telefon_val = "+49 123 12345678" if mit_beispieldaten else telefon_val or ""
plz_val = "12345" if mit_beispieldaten else plz_val or ""
ort_val = "Musterstadt" if mit_beispieldaten else ort_val or ""
strasse_val = "Musterstra√üe 1" if mit_beispieldaten else strasse_val or ""

stromverbrauch_val = 200000.0 if mit_beispieldaten else stromverbrauch_val if stromverbrauch_val is not None else 200000.0
betriebsstunden_val = 6000 if mit_beispieldaten else betriebsstunden_val if betriebsstunden_val is not None else 6000
strompreis_val = 0.32 if mit_beispieldaten else strompreis_val if strompreis_val is not None else 0.20
max_k√§lteleistung_val = 120.0 if mit_beispieldaten else max_k√§lteleistung_val if max_k√§lteleistung_val is not None else 120.0
durchschn_k√§lteleistung_val = 100.0 if mit_beispieldaten else durchschn_k√§lteleistung_val if durchschn_k√§lteleistung_val is not None else 100.0
wirkungsgrad_val = 3.0 if mit_beispieldaten else wirkungsgrad_val if wirkungsgrad_val is not None else 3.0
volumenstrom_val = 28.7 if mit_beispieldaten else volumenstrom_val if volumenstrom_val is not None else 28.7
temp_eintritt_val = 18.0 if mit_beispieldaten else temp_eintritt_val if temp_eintritt_val is not None else 18.0
temp_austritt_val = 15.0 if mit_beispieldaten else temp_austritt_val if temp_austritt_val is not None else 15.0


# Schrittweite definieren f√ºr bessere Nutzung mit Plus-/Minus-Schaltfl√§chen
stromverbrauch_step = 50.0
betriebsstunden_step = 100
messung_step = 0.5
strompreis_step = 0.01
leistung_step = 5.0
eer_step = 0.1
temp_step = 0.5
volumen_step = 0.5

st.header("1. Allgemeine Informationen")
standort = st.text_input("Standort der Anlage", value=standort_val, help=tooltips["standort"])
betreiber = st.text_input("Betreiber / Unternehmen", value=betreiber_val, help=tooltips["betreiber"])
kontaktperson = st.text_input("Kontaktperson", value=kontaktperson_val, help=tooltips["kontaktperson"])
email = st.text_input("E-Mail-Adresse", value=email_val, help=tooltips["email"])
telefon = st.text_input("Telefonnummer", value=telefon_val, help=tooltips["email"])
plz = st.text_input("PLZ", value=plz_val, help=tooltips["plz"])
ort = st.text_input("Ort", value=ort_val, help=tooltips["ort"])
strasse = st.text_input("Strasse und Hausnummer", value=strasse_val, help=tooltips["strasse"])

st.header("2. Energieverbrauch & Kosten")
st.markdown(
    """
    <style>
    .custom-info-box {
        padding: 1em;
        background-color: #172D43; /* Exakte Info-Box-Farbe */
        color: #C7EBFF; /* Wei√üe Schrift f√ºr besseren Kontrast */
        border-radius: 5px;
        font-weight: normal;
    }
    </style>
    <div class="custom-info-box">
        üí° Zuerst ermitteln wir den IST-Zustand Ihrer Anlage. Hierf√ºr ben√∂tigen wir folgende Angaben:
    </div>
    """,
    unsafe_allow_html=True
)
betriebsstunden = st.number_input("Betriebsstunden pro Jahr", min_value=0, max_value=8760, value=betriebsstunden_val, step=betriebsstunden_step, format="%d", help=tooltips["betriebsstunden"])
strompreis = st.number_input("Strompreis pro kWh (EUR)", min_value=0.0, value=strompreis_val, step=strompreis_step, format="%0.2f", help=tooltips["strompreis"])

verbrauch_bekannt = st.radio(
    "Ist der Jahresstromverbrauch bekannt?",
    ("Ja", "Nein"),
    index=0,
    horizontal=True
)

if verbrauch_bekannt == "Ja":
    stromverbrauch = st.number_input(
        "Jahresstromverbrauch der K√§ltemaschine (kWh)",
        min_value=0.0,
        value=stromverbrauch_val,
        step=stromverbrauch_step,
        format="%0.0f",
        help=tooltips["stromverbrauch"]
    )
else:
    stromverbrauch = 0.0  # oder None, je nach sp√§terer Verarbeitung

    ermitteln = st.checkbox("Wollen Sie den Verbrauch selbst ermitteln (z.‚ÄØB. per Kurzzeitmessung)?")

    if ermitteln:
        st.subheader("2.1 Messbasierte Verbrauchserfassung")
        st.info("üí° Tragen Sie hier den gemessenen Wert Stromverbrauch K√§ltemaschine (kWh) und die Dauer der Messung in Stunden ein.")

        messverbrauch = st.number_input("Gemessener Stromverbrauch (kWh)", min_value=0.0, step=stromverbrauch_step, format="%0.0f", help=tooltips["messverbrauch"])
        messdauer = st.number_input("Dauer der Messung (Stunden)", min_value=0.5, step=messung_step, format="%0.1f", help=tooltips["messdauer"])

        if messdauer > 0:
            leistung_messung = messverbrauch / messdauer
            st.write(f"üîπ Durchschnittliche elektrische Leistungsaufnahme: {format_de(leistung_messung, 0)} kW")
            berechnete_kaelteleistung = leistung_messung * wirkungsgrad_val
            st.write(f"üîπ resultierende durchschnittliche K√§lteleistung: {format_de(berechnete_kaelteleistung, 1)} kW")
        else:
            durchschn_leistung = None
            st.warning("Bitte eine Messdauer > 0 angeben.")

            if betriebsstunden > 0:
                stromverbrauch = leistung_messung * betriebsstunden
                st.write(f"üîπ Jahresstromverbrauch (prognostiziert): {format_de(stromverbrauch, 0)} kWh")

st.header("3. Daten der Bestandsk√§ltemaschine")
st.info("üí° Maximale K√§lteleistung laut Hersteller. Durchschnittswerte k√∂nnen gesch√§tzt oder berechnet werden.")
max_k√§lteleistung = st.number_input("Nenn-K√§lteleistung (kW) laut Datenblatt", min_value=0.0, value=max_k√§lteleistung_val, step=leistung_step, format="%0.1f", help=tooltips["max_k√§lteleistung"])
durchschn_k√§lteleistung = st.number_input("Durchschnittlich abgenommene K√§lteleistung (kW), falls bekannt.", min_value=0.0, value=durchschn_k√§lteleistung_val, step=leistung_step, format="%0.1f", help=tooltips["durchschn_k√§lteleistung"])
wirkungsgrad = st.number_input("Wirkungsgrad (EER)", min_value=0.1, max_value=10.0, value=wirkungsgrad_val, step=eer_step, format="%0.1f", help=tooltips["wirkungsgrad"])

# Berechnung: Durchschnittliche K√§lteleistung aus Stromverbrauch und Wirkungsgrad
# ‚ûï Absicherung gegen Division durch 0 bei Abweichungsberechnung
if wirkungsgrad > 0 and stromverbrauch > 0 and betriebsstunden > 0:
    berechnete_k√§lteleistung = stromverbrauch / betriebsstunden * wirkungsgrad
    st.write(f"üîπ Berechnete durchschnittliche K√§lteleistung aus Jahresstromverbrauch und Betriebsstunden: {format_de(berechnete_k√§lteleistung, 1)} kW")

    if durchschn_k√§lteleistung > 0:
        differenz = abs(durchschn_k√§lteleistung - berechnete_k√§lteleistung)
        if berechnete_k√§lteleistung != 0:
            prozent_diff = differenz / berechnete_k√§lteleistung
            if prozent_diff < 0.05:
                st.success(f"‚úÖ Unterschied zur Eingabe: {format_de(differenz, 1)} kW ({prozent_diff:.0%} Abweichung)")
            elif prozent_diff < 0.20:
                st.warning(f"‚ö†Ô∏è Unterschied zur Eingabe: {format_de(differenz, 1)} kW ({prozent_diff:.0%} Abweichung)")
            else:
                st.error(f"üö® Starke Abweichung: {format_de(differenz, 1)} kW ({prozent_diff:.0%} Abweichung)")
        else:
            st.warning("Berechnete K√§lteleistung ist 0 ‚Äì kein Vergleich m√∂glich.")
else:
    st.info("Berechnung der durchschnittlichen K√§lteleistung nicht m√∂glich ‚Äì bitte Werte pr√ºfen.")



st.header("4. Alternative Leistungsberechnung")
st.info("üí° Volumenstrom in m¬≥/h und Temperaturen an Ein- und Austritt zur Berechnung der Leistung.")
volumenstrom = st.number_input("Volumenstrom (m¬≥/h)", min_value=0.0, value=5.0, step=volumen_step, format="%0.1f")
temp_eintritt = st.number_input("Eintrittstemperatur (¬∞C)", min_value=8.0, max_value=30.0, value=18.0, step=temp_step, format="%0.1f")
temp_austritt = st.number_input("Austrittstemperatur (¬∞C)", min_value=4.0, max_value=25.0, value=15.0, step=temp_step, format="%0.1f")

delta_T = temp_eintritt - temp_austritt if temp_eintritt > temp_austritt else 0
leistung_temp = volumenstrom * 1.16 * delta_T if delta_T > 0 and volumenstrom > 0 else 0

if betriebsstunden > 0:
    kosten = stromverbrauch * strompreis
    st.write(f"üîπ **J√§hrliche Stromkosten:** {format_de(kosten, 0)} EUR")
else:
    kosten = None

if st.button("Daten speichern"):
    cursor.execute('''
        INSERT INTO betriebsdaten (
            standort, betreiber, kontaktperson, email, telefon, plz, ort, strasse,
            stromverbrauch, betriebsstunden, strompreis,
            max_k√§lteleistung, durchschn_k√§lteleistung, wirkungsgrad,
            volumenstrom, temp_eintritt, temp_austritt,
            kosten
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        standort, betreiber, kontaktperson, email, telefon, plz, ort, strasse,
        stromverbrauch, betriebsstunden, strompreis,
        max_k√§lteleistung, durchschn_k√§lteleistung, wirkungsgrad,
        volumenstrom, temp_eintritt, temp_austritt,
        kosten
    ))
    conn.commit()
    st.session_state['eigene_id'] = cursor.lastrowid
    encrypt_database()  # üîê automatische Verschl√ºsselung
    st.success("‚úÖ Daten wurden erfolgreich gespeichert und verschl√ºsselt!")



if st.button("Gespeicherte Daten anzeigen"):
    if 'eigene_id' in st.session_state:
        cursor.execute("SELECT * FROM betriebsdaten WHERE id = ?", (st.session_state['eigene_id'],))
        daten = cursor.fetchall()
        df = pd.DataFrame(daten, columns=[
            "ID", "Standort", "Betreiber", "Kontaktperson", "E-Mail", "Telefon", "PLZ", "Ort", "Strasse",
            "Stromverbrauch", "Betriebsstunden", "Strompreis", "Max. K√§lteleistung",
            "Durchschn. K√§lteleistung", "Wirkungsgrad", "Volumenstrom",
            "T Eintritt", "T Austritt", "Kosten"
            ])
        st.dataframe(df)
    else:
        st.info("Keine Daten in dieser Session gespeichert.")


if st.button("PDF erstellen"):
    data = {
        "Standort": standort,
        "Betreiber": betreiber,
        "Kontaktperson": kontaktperson,
        "E-Mail": email,
        "Telefon": telefon,
        "PLZ": plz,
        "Ort": ort,
        "Strasse": strasse,
        "Stromverbrauch (kWh)": format_de(stromverbrauch, 0),
        "Betriebsstunden": format_de(betriebsstunden, 0),
        "Strompreis (EUR/kWh)": format_de(strompreis, 2),
        "Max. K√§lteleistung (kW)": format_de(max_k√§lteleistung, 0),
        "Durchschn. K√§lteleistung (kW)": format_de(durchschn_k√§lteleistung, 0),
        "Wirkungsgrad (EER)": format_de(wirkungsgrad, 1),
        "Volumenstrom (m¬≥/h)": format_de(volumenstrom, 1),
        "Temperatur Eintritt (¬∞C)": format_de(temp_eintritt, 1),
        "Temperatur Austritt (¬∞C)": format_de(temp_austritt, 1),
        "J√§hrliche Kosten (EUR)": format_de(kosten, 0) if kosten is not None else "N/A",
    }
    pdf_path = generate_pdf(data)
    st.success("‚úÖ PDF wurde erstellt!")
    with open(pdf_path, "rb") as file:
        st.download_button("üìÑ PDF herunterladen", file, file_name="Betriebsbericht.pdf")

from wetterdienst.provider.dwd.observation import DwdObservationRequest
from geopy.geocoders import Nominatim
from datetime import datetime

@st.cache_data(show_spinner=False)
def get_coordinates_from_plz(plz_code):
    geolocator = Nominatim(user_agent="coolcalc")
    location = geolocator.geocode(f"{plz_code}, Germany")
    if location:
        return (location.latitude, location.longitude)
    return None

@st.cache_data(show_spinner=True)
def get_stationen_und_parameter(coords, entfernung_km):
    lat, lon = coords
    request = DwdObservationRequest(
        parameters="hourly/air_temperature",
        periods="historical",
        start_date="2023-01-01",
        end_date="2023-12-31"
    )
    stations = request.filter_by_distance((lat, lon), distance=entfernung_km)
    df_stations = stations.df

    stationen_mit_parametern = {}

    for station_id in df_stations["station_id"]:
        try:
            req = request.filter_by_station_id(station_id)
            df = req.values.all().df
            if df.shape[0] == 0:
                continue
            parameter_liste = df["parameter"].unique().to_list()
            if "temperature_air_mean_2m" in parameter_liste:
                stationen_mit_parametern[station_id] = {
                    "parameter": parameter_liste,
                    "daten": df
                }
        except Exception:
            continue

    return stationen_mit_parametern


# üîÑ Temperatur-Auswertung aus PLZ
if plz:
    coords = get_coordinates_from_plz(plz)
    if coords:
        entfernung = st.slider("Suchradius f√ºr Wetterstationen (km)", min_value=10, max_value=300, value=100, step=10)

        st.markdown("### Temperaturgrenzen definieren")
        temp_grenze_1 = st.number_input("Grenze 1 (z.‚ÄØB. < 12‚ÄØ¬∞C)", min_value=-50.0, max_value=60.0, value=12.0, step=0.5)
        temp_grenze_2 = st.number_input("Grenze 2 (z.‚ÄØB. < 21‚ÄØ¬∞C)", min_value=temp_grenze_1, max_value=60.0, value=21.0, step=0.5)
        temp_grenze_3 = st.number_input("Grenze 3 (z.‚ÄØB. < 30‚ÄØ¬∞C)", min_value=temp_grenze_2, max_value=60.0, value=30.0, step=0.5)

        with st.expander("üìà Au√üentemperatur-Auswertung 2023 (DWD)", expanded=False):
            with st.spinner("Stationen & Parameter werden geladen..."):
                try:
                    daten = get_stationen_und_parameter(coords, entfernung)
                    if daten:
                        stationen = list(daten.keys())
                        station_id = st.selectbox("Wetterstation ausw√§hlen", stationen)
                        df_temp = daten[station_id]["daten"]
                        df_temp = df_temp.filter(pl.col("parameter") == "temperature_air_mean_2m")

                        st.success(f"Daten von Station {station_id} ‚Äì Temperaturmittelwerte")

                        z√§hlung = {
                            f"< {temp_grenze_1}‚ÄØ¬∞C": (df_temp["value"] < temp_grenze_1).sum(),
                            f"{temp_grenze_1}‚ÄØ¬∞C ‚Äì <{temp_grenze_2}‚ÄØ¬∞C": ((df_temp["value"] >= temp_grenze_1) & (df_temp["value"] < temp_grenze_2)).sum(),
                            f"{temp_grenze_2}‚ÄØ¬∞C ‚Äì <{temp_grenze_3}‚ÄØ¬∞C": ((df_temp["value"] >= temp_grenze_2) & (df_temp["value"] < temp_grenze_3)).sum(),
                            f"‚â• {temp_grenze_3}‚ÄØ¬∞C": (df_temp["value"] >= temp_grenze_3).sum()
                        }

                        st.write("üî¢ Temperaturverteilung (Stunden 2023):")
                        for bereich, anzahl in z√§hlung.items():
                            st.markdown(f"- **{bereich}**: {anzahl} Stunden")

                        st.line_chart(df_temp.rename({"date": "index"}).to_pandas().set_index("index")["value"])

                    else:
                        st.warning("‚ö†Ô∏è Keine g√ºltige Station mit Temperaturdaten gefunden.")
                except Exception as e:
                    st.error(f"Fehler beim Abrufen: {e}")

# üîí Entwicklerzugang: Gesicherter Datenbank-Download
query_params = st.query_params
# st.write("Query Params:", query_params)
admin_access = query_params.get("zugang", "") == "6T8wA7v9zQp1"   # sicherer Parameter


if admin_access:
    st.markdown("---")
    st.subheader("üîí Entwicklerzugang: Datenbank-Export")

    password = st.text_input("Admin-Passwort eingeben", type="password")

    if password == ADMIN_PASSWORT:
        encrypted_path = "datenbank/betriebsdaten_encrypted.db"
        if os.path.exists(encrypted_path):
            with open(encrypted_path, "rb") as f:
                st.download_button("üì• Verschl√ºsselte Datenbank herunterladen", f, file_name="betriebsdaten_encrypted.db")
        else:
            st.warning("‚ö†Ô∏è Keine verschl√ºsselte Datenbank gefunden.")
    elif password != "":
        st.error("‚ùå Falsches Passwort.")

